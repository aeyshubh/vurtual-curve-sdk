/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLiquidityDistributionConfigDecoder,
  getLiquidityDistributionConfigEncoder,
  getPoolFeesConfigDecoder,
  getPoolFeesConfigEncoder,
  type LiquidityDistributionConfig,
  type LiquidityDistributionConfigArgs,
  type PoolFeesConfig,
  type PoolFeesConfigArgs,
} from '../types';

export const POOL_CONFIG_DISCRIMINATOR = new Uint8Array([
  26, 108, 14, 123, 116, 230, 129, 43,
]);

export function getPoolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_CONFIG_DISCRIMINATOR);
}

export type PoolConfig = {
  discriminator: ReadonlyUint8Array;
  /** quote mint */
  quoteMint: Address;
  /** Address to get the fee */
  feeClaimer: Address;
  /** Owner of that config key */
  owner: Address;
  /** Pool fee */
  poolFees: PoolFeesConfig;
  /** Collect fee mode */
  collectFeeMode: number;
  /** migration option */
  migrationOption: number;
  /** whether mode slot or timestamp */
  activationType: number;
  /** token decimals */
  tokenDecimal: number;
  /** creator post migration fee percentage */
  creatorPostMigrationFeePercentage: number;
  /** version */
  version: number;
  /** token type of base token */
  tokenType: number;
  /** quote token flag */
  quoteTokenFlag: number;
  /** swap base amount */
  swapBaseAmount: bigint;
  /** migration quote threshold (in quote token) */
  migrationQuoteThreshold: bigint;
  /** migration base threshold (in base token) */
  migrationBaseThreshold: bigint;
  /** padding 1 */
  padding1: Array<bigint>;
  /** minimum price */
  sqrtStartPrice: bigint;
  /** curve, only use 20 point firstly, we can extend that latter */
  curve: Array<LiquidityDistributionConfig>;
};

export type PoolConfigArgs = {
  /** quote mint */
  quoteMint: Address;
  /** Address to get the fee */
  feeClaimer: Address;
  /** Owner of that config key */
  owner: Address;
  /** Pool fee */
  poolFees: PoolFeesConfigArgs;
  /** Collect fee mode */
  collectFeeMode: number;
  /** migration option */
  migrationOption: number;
  /** whether mode slot or timestamp */
  activationType: number;
  /** token decimals */
  tokenDecimal: number;
  /** creator post migration fee percentage */
  creatorPostMigrationFeePercentage: number;
  /** version */
  version: number;
  /** token type of base token */
  tokenType: number;
  /** quote token flag */
  quoteTokenFlag: number;
  /** swap base amount */
  swapBaseAmount: number | bigint;
  /** migration quote threshold (in quote token) */
  migrationQuoteThreshold: number | bigint;
  /** migration base threshold (in base token) */
  migrationBaseThreshold: number | bigint;
  /** padding 1 */
  padding1: Array<number | bigint>;
  /** minimum price */
  sqrtStartPrice: number | bigint;
  /** curve, only use 20 point firstly, we can extend that latter */
  curve: Array<LiquidityDistributionConfigArgs>;
};

export function getPoolConfigEncoder(): Encoder<PoolConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['quoteMint', getAddressEncoder()],
      ['feeClaimer', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['poolFees', getPoolFeesConfigEncoder()],
      ['collectFeeMode', getU8Encoder()],
      ['migrationOption', getU8Encoder()],
      ['activationType', getU8Encoder()],
      ['tokenDecimal', getU8Encoder()],
      ['creatorPostMigrationFeePercentage', getU8Encoder()],
      ['version', getU8Encoder()],
      ['tokenType', getU8Encoder()],
      ['quoteTokenFlag', getU8Encoder()],
      ['swapBaseAmount', getU64Encoder()],
      ['migrationQuoteThreshold', getU64Encoder()],
      ['migrationBaseThreshold', getU64Encoder()],
      ['padding1', getArrayEncoder(getU128Encoder(), { size: 8 })],
      ['sqrtStartPrice', getU128Encoder()],
      [
        'curve',
        getArrayEncoder(getLiquidityDistributionConfigEncoder(), { size: 20 }),
      ],
    ]),
    (value) => ({ ...value, discriminator: POOL_CONFIG_DISCRIMINATOR })
  );
}

export function getPoolConfigDecoder(): Decoder<PoolConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['quoteMint', getAddressDecoder()],
    ['feeClaimer', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['poolFees', getPoolFeesConfigDecoder()],
    ['collectFeeMode', getU8Decoder()],
    ['migrationOption', getU8Decoder()],
    ['activationType', getU8Decoder()],
    ['tokenDecimal', getU8Decoder()],
    ['creatorPostMigrationFeePercentage', getU8Decoder()],
    ['version', getU8Decoder()],
    ['tokenType', getU8Decoder()],
    ['quoteTokenFlag', getU8Decoder()],
    ['swapBaseAmount', getU64Decoder()],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['migrationBaseThreshold', getU64Decoder()],
    ['padding1', getArrayDecoder(getU128Decoder(), { size: 8 })],
    ['sqrtStartPrice', getU128Decoder()],
    [
      'curve',
      getArrayDecoder(getLiquidityDistributionConfigDecoder(), { size: 20 }),
    ],
  ]);
}

export function getPoolConfigCodec(): Codec<PoolConfigArgs, PoolConfig> {
  return combineCodec(getPoolConfigEncoder(), getPoolConfigDecoder());
}

export function decodePoolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PoolConfig, TAddress>;
export function decodePoolConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PoolConfig, TAddress>;
export function decodePoolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PoolConfig, TAddress> | MaybeAccount<PoolConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolConfigDecoder()
  );
}

export async function fetchPoolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PoolConfig, TAddress>> {
  const maybeAccount = await fetchMaybePoolConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePoolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PoolConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePoolConfig(maybeAccount);
}

export async function fetchAllPoolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PoolConfig>[]> {
  const maybeAccounts = await fetchAllMaybePoolConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePoolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PoolConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePoolConfig(maybeAccount));
}

export function getPoolConfigSize(): number {
  return 1048;
}
