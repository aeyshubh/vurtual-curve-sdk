/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPoolFeesStructDecoder,
  getPoolFeesStructEncoder,
  getPoolMetricsDecoder,
  getPoolMetricsEncoder,
  type PoolFeesStruct,
  type PoolFeesStructArgs,
  type PoolMetrics,
  type PoolMetricsArgs,
} from '../types';

export const VIRTUAL_POOL_DISCRIMINATOR = new Uint8Array([
  213, 224, 5, 209, 98, 69, 119, 92,
]);

export function getVirtualPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VIRTUAL_POOL_DISCRIMINATOR
  );
}

export type VirtualPool = {
  discriminator: ReadonlyUint8Array;
  /** Pool fee */
  poolFees: PoolFeesStruct;
  /** config key */
  config: Address;
  /** creator */
  creator: Address;
  /** base mint */
  baseMint: Address;
  /** base vault */
  baseVault: Address;
  /** quote vault */
  quoteVault: Address;
  /** base reserve */
  baseReserve: bigint;
  /** quote reserve */
  quoteReserve: bigint;
  /** protocol base fee */
  protocolBaseFee: bigint;
  /** protocol quote fee */
  protocolQuoteFee: bigint;
  /** trading base fee */
  tradingBaseFee: bigint;
  /** trading quote fee */
  tradingQuoteFee: bigint;
  /** current price */
  sqrtPrice: bigint;
  /** Activation point */
  activationPoint: bigint;
  /** pool type, spl token or token2022 */
  poolType: number;
  /** is migrated */
  isMigrated: number;
  /** is partner withdraw surplus */
  isPartnerWithdrawSurplus: number;
  /** is protocol withdraw surplus */
  isProcotolWithdrawSurplus: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** pool metrics */
  metrics: PoolMetrics;
  /** Padding for further use */
  padding1: Array<bigint>;
};

export type VirtualPoolArgs = {
  /** Pool fee */
  poolFees: PoolFeesStructArgs;
  /** config key */
  config: Address;
  /** creator */
  creator: Address;
  /** base mint */
  baseMint: Address;
  /** base vault */
  baseVault: Address;
  /** quote vault */
  quoteVault: Address;
  /** base reserve */
  baseReserve: number | bigint;
  /** quote reserve */
  quoteReserve: number | bigint;
  /** protocol base fee */
  protocolBaseFee: number | bigint;
  /** protocol quote fee */
  protocolQuoteFee: number | bigint;
  /** trading base fee */
  tradingBaseFee: number | bigint;
  /** trading quote fee */
  tradingQuoteFee: number | bigint;
  /** current price */
  sqrtPrice: number | bigint;
  /** Activation point */
  activationPoint: number | bigint;
  /** pool type, spl token or token2022 */
  poolType: number;
  /** is migrated */
  isMigrated: number;
  /** is partner withdraw surplus */
  isPartnerWithdrawSurplus: number;
  /** is protocol withdraw surplus */
  isProcotolWithdrawSurplus: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** pool metrics */
  metrics: PoolMetricsArgs;
  /** Padding for further use */
  padding1: Array<number | bigint>;
};

export function getVirtualPoolEncoder(): Encoder<VirtualPoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolFees', getPoolFeesStructEncoder()],
      ['config', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['baseMint', getAddressEncoder()],
      ['baseVault', getAddressEncoder()],
      ['quoteVault', getAddressEncoder()],
      ['baseReserve', getU64Encoder()],
      ['quoteReserve', getU64Encoder()],
      ['protocolBaseFee', getU64Encoder()],
      ['protocolQuoteFee', getU64Encoder()],
      ['tradingBaseFee', getU64Encoder()],
      ['tradingQuoteFee', getU64Encoder()],
      ['sqrtPrice', getU128Encoder()],
      ['activationPoint', getU64Encoder()],
      ['poolType', getU8Encoder()],
      ['isMigrated', getU8Encoder()],
      ['isPartnerWithdrawSurplus', getU8Encoder()],
      ['isProcotolWithdrawSurplus', getU8Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 4)],
      ['metrics', getPoolMetricsEncoder()],
      ['padding1', getArrayEncoder(getU64Encoder(), { size: 10 })],
    ]),
    (value) => ({ ...value, discriminator: VIRTUAL_POOL_DISCRIMINATOR })
  );
}

export function getVirtualPoolDecoder(): Decoder<VirtualPool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolFees', getPoolFeesStructDecoder()],
    ['config', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['baseVault', getAddressDecoder()],
    ['quoteVault', getAddressDecoder()],
    ['baseReserve', getU64Decoder()],
    ['quoteReserve', getU64Decoder()],
    ['protocolBaseFee', getU64Decoder()],
    ['protocolQuoteFee', getU64Decoder()],
    ['tradingBaseFee', getU64Decoder()],
    ['tradingQuoteFee', getU64Decoder()],
    ['sqrtPrice', getU128Decoder()],
    ['activationPoint', getU64Decoder()],
    ['poolType', getU8Decoder()],
    ['isMigrated', getU8Decoder()],
    ['isPartnerWithdrawSurplus', getU8Decoder()],
    ['isProcotolWithdrawSurplus', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 4)],
    ['metrics', getPoolMetricsDecoder()],
    ['padding1', getArrayDecoder(getU64Decoder(), { size: 10 })],
  ]);
}

export function getVirtualPoolCodec(): Codec<VirtualPoolArgs, VirtualPool> {
  return combineCodec(getVirtualPoolEncoder(), getVirtualPoolDecoder());
}

export function decodeVirtualPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VirtualPool, TAddress>;
export function decodeVirtualPool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VirtualPool, TAddress>;
export function decodeVirtualPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VirtualPool, TAddress> | MaybeAccount<VirtualPool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVirtualPoolDecoder()
  );
}

export async function fetchVirtualPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VirtualPool, TAddress>> {
  const maybeAccount = await fetchMaybeVirtualPool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVirtualPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VirtualPool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVirtualPool(maybeAccount);
}

export async function fetchAllVirtualPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VirtualPool>[]> {
  const maybeAccounts = await fetchAllMaybeVirtualPool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVirtualPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VirtualPool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVirtualPool(maybeAccount));
}

export function getVirtualPoolSize(): number {
  return 520;
}
