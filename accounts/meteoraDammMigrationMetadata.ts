/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const METEORA_DAMM_MIGRATION_METADATA_DISCRIMINATOR = new Uint8Array([
  17, 155, 141, 215, 207, 4, 133, 156,
]);

export function getMeteoraDammMigrationMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    METEORA_DAMM_MIGRATION_METADATA_DISCRIMINATOR
  );
}

export type MeteoraDammMigrationMetadata = {
  discriminator: ReadonlyUint8Array;
  /** operator */
  virtualPool: Address;
  /** owner */
  owner: Address;
  /** partner */
  partner: Address;
  /** lp mint */
  lpMint: Address;
  /** minted lp amount for creator */
  lpMintedAmountForCreator: bigint;
  /** minted lp amount for partner */
  lpMintedAmountForPartner: bigint;
  /** progress */
  progress: number;
  /** flag to check whether lp is locked for creator */
  creatorLockedStatus: number;
  /** flag to check whether lp is locked for partner */
  partnerLockedStatus: number;
  /** Reserve */
  padding: ReadonlyUint8Array;
};

export type MeteoraDammMigrationMetadataArgs = {
  /** operator */
  virtualPool: Address;
  /** owner */
  owner: Address;
  /** partner */
  partner: Address;
  /** lp mint */
  lpMint: Address;
  /** minted lp amount for creator */
  lpMintedAmountForCreator: number | bigint;
  /** minted lp amount for partner */
  lpMintedAmountForPartner: number | bigint;
  /** progress */
  progress: number;
  /** flag to check whether lp is locked for creator */
  creatorLockedStatus: number;
  /** flag to check whether lp is locked for partner */
  partnerLockedStatus: number;
  /** Reserve */
  padding: ReadonlyUint8Array;
};

export function getMeteoraDammMigrationMetadataEncoder(): Encoder<MeteoraDammMigrationMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['virtualPool', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['partner', getAddressEncoder()],
      ['lpMint', getAddressEncoder()],
      ['lpMintedAmountForCreator', getU64Encoder()],
      ['lpMintedAmountForPartner', getU64Encoder()],
      ['progress', getU8Encoder()],
      ['creatorLockedStatus', getU8Encoder()],
      ['partnerLockedStatus', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 125)],
    ]),
    (value) => ({
      ...value,
      discriminator: METEORA_DAMM_MIGRATION_METADATA_DISCRIMINATOR,
    })
  );
}

export function getMeteoraDammMigrationMetadataDecoder(): Decoder<MeteoraDammMigrationMetadata> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['virtualPool', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['partner', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['lpMintedAmountForCreator', getU64Decoder()],
    ['lpMintedAmountForPartner', getU64Decoder()],
    ['progress', getU8Decoder()],
    ['creatorLockedStatus', getU8Decoder()],
    ['partnerLockedStatus', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 125)],
  ]);
}

export function getMeteoraDammMigrationMetadataCodec(): Codec<
  MeteoraDammMigrationMetadataArgs,
  MeteoraDammMigrationMetadata
> {
  return combineCodec(
    getMeteoraDammMigrationMetadataEncoder(),
    getMeteoraDammMigrationMetadataDecoder()
  );
}

export function decodeMeteoraDammMigrationMetadata<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MeteoraDammMigrationMetadata, TAddress>;
export function decodeMeteoraDammMigrationMetadata<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MeteoraDammMigrationMetadata, TAddress>;
export function decodeMeteoraDammMigrationMetadata<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<MeteoraDammMigrationMetadata, TAddress>
  | MaybeAccount<MeteoraDammMigrationMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMeteoraDammMigrationMetadataDecoder()
  );
}

export async function fetchMeteoraDammMigrationMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MeteoraDammMigrationMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeMeteoraDammMigrationMetadata(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMeteoraDammMigrationMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MeteoraDammMigrationMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMeteoraDammMigrationMetadata(maybeAccount);
}

export async function fetchAllMeteoraDammMigrationMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MeteoraDammMigrationMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeMeteoraDammMigrationMetadata(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMeteoraDammMigrationMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MeteoraDammMigrationMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMeteoraDammMigrationMetadata(maybeAccount)
  );
}

export function getMeteoraDammMigrationMetadataSize(): number {
  return 280;
}
