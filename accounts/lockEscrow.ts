/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const LOCK_ESCROW_DISCRIMINATOR = new Uint8Array([
  190, 106, 121, 6, 200, 182, 21, 75,
]);

export function getLockEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOCK_ESCROW_DISCRIMINATOR);
}

export type LockEscrow = {
  discriminator: ReadonlyUint8Array;
  pool: Address;
  owner: Address;
  escrowVault: Address;
  bump: number;
  totalLockedAmount: bigint;
  lpPerToken: bigint;
  unclaimedFeePending: bigint;
  aFee: bigint;
  bFee: bigint;
};

export type LockEscrowArgs = {
  pool: Address;
  owner: Address;
  escrowVault: Address;
  bump: number;
  totalLockedAmount: number | bigint;
  lpPerToken: number | bigint;
  unclaimedFeePending: number | bigint;
  aFee: number | bigint;
  bFee: number | bigint;
};

export function getLockEscrowEncoder(): Encoder<LockEscrowArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pool', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['escrowVault', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['totalLockedAmount', getU64Encoder()],
      ['lpPerToken', getU128Encoder()],
      ['unclaimedFeePending', getU64Encoder()],
      ['aFee', getU64Encoder()],
      ['bFee', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_ESCROW_DISCRIMINATOR })
  );
}

export function getLockEscrowDecoder(): Decoder<LockEscrow> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pool', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['escrowVault', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['totalLockedAmount', getU64Decoder()],
    ['lpPerToken', getU128Decoder()],
    ['unclaimedFeePending', getU64Decoder()],
    ['aFee', getU64Decoder()],
    ['bFee', getU64Decoder()],
  ]);
}

export function getLockEscrowCodec(): Codec<LockEscrowArgs, LockEscrow> {
  return combineCodec(getLockEscrowEncoder(), getLockEscrowDecoder());
}

export function decodeLockEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LockEscrow, TAddress>;
export function decodeLockEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LockEscrow, TAddress>;
export function decodeLockEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<LockEscrow, TAddress> | MaybeAccount<LockEscrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLockEscrowDecoder()
  );
}

export async function fetchLockEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LockEscrow, TAddress>> {
  const maybeAccount = await fetchMaybeLockEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLockEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LockEscrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLockEscrow(maybeAccount);
}

export async function fetchAllLockEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LockEscrow>[]> {
  const maybeAccounts = await fetchAllMaybeLockEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLockEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LockEscrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLockEscrow(maybeAccount));
}

export function getLockEscrowSize(): number {
  return 153;
}
