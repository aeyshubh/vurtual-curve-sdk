/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getLiquidityDistributionParametersDecoder,
  getLiquidityDistributionParametersEncoder,
  getPoolFeeParamtersDecoder,
  getPoolFeeParamtersEncoder,
  type LiquidityDistributionParameters,
  type LiquidityDistributionParametersArgs,
  type PoolFeeParamters,
  type PoolFeeParamtersArgs,
} from '.';

/** Create config */
export type EvtCreateConfig = {
  config: Address;
  quoteMint: Address;
  feeClaimer: Address;
  owner: Address;
  poolFees: PoolFeeParamters;
  collectFeeMode: number;
  migrationOption: number;
  activationType: number;
  tokenDecimal: number;
  tokenType: number;
  swapBaseAmount: bigint;
  migrationQuoteThreshold: bigint;
  migrationBaseAmount: bigint;
  sqrtStartPrice: bigint;
  curve: Array<LiquidityDistributionParameters>;
};

export type EvtCreateConfigArgs = {
  config: Address;
  quoteMint: Address;
  feeClaimer: Address;
  owner: Address;
  poolFees: PoolFeeParamtersArgs;
  collectFeeMode: number;
  migrationOption: number;
  activationType: number;
  tokenDecimal: number;
  tokenType: number;
  swapBaseAmount: number | bigint;
  migrationQuoteThreshold: number | bigint;
  migrationBaseAmount: number | bigint;
  sqrtStartPrice: number | bigint;
  curve: Array<LiquidityDistributionParametersArgs>;
};

export function getEvtCreateConfigEncoder(): Encoder<EvtCreateConfigArgs> {
  return getStructEncoder([
    ['config', getAddressEncoder()],
    ['quoteMint', getAddressEncoder()],
    ['feeClaimer', getAddressEncoder()],
    ['owner', getAddressEncoder()],
    ['poolFees', getPoolFeeParamtersEncoder()],
    ['collectFeeMode', getU8Encoder()],
    ['migrationOption', getU8Encoder()],
    ['activationType', getU8Encoder()],
    ['tokenDecimal', getU8Encoder()],
    ['tokenType', getU8Encoder()],
    ['swapBaseAmount', getU64Encoder()],
    ['migrationQuoteThreshold', getU64Encoder()],
    ['migrationBaseAmount', getU64Encoder()],
    ['sqrtStartPrice', getU128Encoder()],
    ['curve', getArrayEncoder(getLiquidityDistributionParametersEncoder())],
  ]);
}

export function getEvtCreateConfigDecoder(): Decoder<EvtCreateConfig> {
  return getStructDecoder([
    ['config', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['feeClaimer', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['poolFees', getPoolFeeParamtersDecoder()],
    ['collectFeeMode', getU8Decoder()],
    ['migrationOption', getU8Decoder()],
    ['activationType', getU8Decoder()],
    ['tokenDecimal', getU8Decoder()],
    ['tokenType', getU8Decoder()],
    ['swapBaseAmount', getU64Decoder()],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['migrationBaseAmount', getU64Decoder()],
    ['sqrtStartPrice', getU128Decoder()],
    ['curve', getArrayDecoder(getLiquidityDistributionParametersDecoder())],
  ]);
}

export function getEvtCreateConfigCodec(): Codec<
  EvtCreateConfigArgs,
  EvtCreateConfig
> {
  return combineCodec(getEvtCreateConfigEncoder(), getEvtCreateConfigDecoder());
}
