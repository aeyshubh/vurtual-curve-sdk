/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getBaseFeeStructDecoder,
  getBaseFeeStructEncoder,
  getDynamicFeeStructDecoder,
  getDynamicFeeStructEncoder,
  type BaseFeeStruct,
  type BaseFeeStructArgs,
  type DynamicFeeStruct,
  type DynamicFeeStructArgs,
} from '.';

/**
 * Information regarding fee charges
 * trading_fee = amount * trade_fee_numerator / denominator
 * protocol_fee = trading_fee * protocol_fee_percentage / 100
 * referral_fee = protocol_fee * referral_percentage / 100
 * partner_fee = trading_fee - protocol_fee - referral_fee
 */

export type PoolFeesStruct = {
  /**
   * Trade fees are extra token amounts that are held inside the token
   * accounts during a trade, making the value of liquidity tokens rise.
   * Trade fee numerator
   */
  baseFee: BaseFeeStruct;
  /**
   * Protocol trading fees are extra token amounts that are held inside the token
   * accounts during a trade, with the equivalent in pool tokens minted to
   * the protocol of the program.
   * Protocol trade fee numerator
   */
  protocolFeePercent: number;
  /** referral fee */
  referralFeePercent: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** dynamic fee */
  dynamicFee: DynamicFeeStruct;
  /** padding */
  padding1: Array<bigint>;
};

export type PoolFeesStructArgs = {
  /**
   * Trade fees are extra token amounts that are held inside the token
   * accounts during a trade, making the value of liquidity tokens rise.
   * Trade fee numerator
   */
  baseFee: BaseFeeStructArgs;
  /**
   * Protocol trading fees are extra token amounts that are held inside the token
   * accounts during a trade, with the equivalent in pool tokens minted to
   * the protocol of the program.
   * Protocol trade fee numerator
   */
  protocolFeePercent: number;
  /** referral fee */
  referralFeePercent: number;
  /** padding */
  padding0: ReadonlyUint8Array;
  /** dynamic fee */
  dynamicFee: DynamicFeeStructArgs;
  /** padding */
  padding1: Array<number | bigint>;
};

export function getPoolFeesStructEncoder(): Encoder<PoolFeesStructArgs> {
  return getStructEncoder([
    ['baseFee', getBaseFeeStructEncoder()],
    ['protocolFeePercent', getU8Encoder()],
    ['referralFeePercent', getU8Encoder()],
    ['padding0', fixEncoderSize(getBytesEncoder(), 6)],
    ['dynamicFee', getDynamicFeeStructEncoder()],
    ['padding1', getArrayEncoder(getU64Encoder(), { size: 2 })],
  ]);
}

export function getPoolFeesStructDecoder(): Decoder<PoolFeesStruct> {
  return getStructDecoder([
    ['baseFee', getBaseFeeStructDecoder()],
    ['protocolFeePercent', getU8Decoder()],
    ['referralFeePercent', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 6)],
    ['dynamicFee', getDynamicFeeStructDecoder()],
    ['padding1', getArrayDecoder(getU64Decoder(), { size: 2 })],
  ]);
}

export function getPoolFeesStructCodec(): Codec<
  PoolFeesStructArgs,
  PoolFeesStruct
> {
  return combineCodec(getPoolFeesStructEncoder(), getPoolFeesStructDecoder());
}
