/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_TRADING_FEE_DISCRIMINATOR = new Uint8Array([
  8, 236, 89, 49, 152, 125, 177, 81,
]);

export function getClaimTradingFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_TRADING_FEE_DISCRIMINATOR
  );
}

export type ClaimTradingFeeInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountTokenAAccount extends string | IAccountMeta<string> = string,
  TAccountTokenBAccount extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountFeeClaimer extends string | IAccountMeta<string> = string,
  TAccountTokenBaseProgram extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountTokenAAccount extends string
        ? WritableAccount<TAccountTokenAAccount>
        : TAccountTokenAAccount,
      TAccountTokenBAccount extends string
        ? WritableAccount<TAccountTokenBAccount>
        : TAccountTokenBAccount,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountFeeClaimer extends string
        ? ReadonlySignerAccount<TAccountFeeClaimer> &
            IAccountSignerMeta<TAccountFeeClaimer>
        : TAccountFeeClaimer,
      TAccountTokenBaseProgram extends string
        ? ReadonlyAccount<TAccountTokenBaseProgram>
        : TAccountTokenBaseProgram,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimTradingFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmountA: bigint;
  maxAmountB: bigint;
};

export type ClaimTradingFeeInstructionDataArgs = {
  maxAmountA: number | bigint;
  maxAmountB: number | bigint;
};

export function getClaimTradingFeeInstructionDataEncoder(): Encoder<ClaimTradingFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmountA', getU64Encoder()],
      ['maxAmountB', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_TRADING_FEE_DISCRIMINATOR })
  );
}

export function getClaimTradingFeeInstructionDataDecoder(): Decoder<ClaimTradingFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmountA', getU64Decoder()],
    ['maxAmountB', getU64Decoder()],
  ]);
}

export function getClaimTradingFeeInstructionDataCodec(): Codec<
  ClaimTradingFeeInstructionDataArgs,
  ClaimTradingFeeInstructionData
> {
  return combineCodec(
    getClaimTradingFeeInstructionDataEncoder(),
    getClaimTradingFeeInstructionDataDecoder()
  );
}

export type ClaimTradingFeeAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  pool: Address<TAccountPool>;
  /** The treasury token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The treasury token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of token a */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of token b */
  quoteMint: Address<TAccountQuoteMint>;
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Token a program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmountA: ClaimTradingFeeInstructionDataArgs['maxAmountA'];
  maxAmountB: ClaimTradingFeeInstructionDataArgs['maxAmountB'];
};

export async function getClaimTradingFeeInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: ClaimTradingFeeAsyncInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimTradingFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimTradingFeeInstructionDataEncoder().encode(
      args as ClaimTradingFeeInstructionDataArgs
    ),
  } as ClaimTradingFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimTradingFeeInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountTokenAAccount extends string = string,
  TAccountTokenBAccount extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  pool: Address<TAccountPool>;
  /** The treasury token a account */
  tokenAAccount: Address<TAccountTokenAAccount>;
  /** The treasury token b account */
  tokenBAccount: Address<TAccountTokenBAccount>;
  /** The vault token account for input token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of token a */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of token b */
  quoteMint: Address<TAccountQuoteMint>;
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Token a program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  maxAmountA: ClaimTradingFeeInstructionDataArgs['maxAmountA'];
  maxAmountB: ClaimTradingFeeInstructionDataArgs['maxAmountB'];
};

export function getClaimTradingFeeInstruction<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountTokenAAccount extends string,
  TAccountTokenBAccount extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: ClaimTradingFeeInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimTradingFeeInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountConfig,
  TAccountPool,
  TAccountTokenAAccount,
  TAccountTokenBAccount,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountFeeClaimer,
  TAccountTokenBaseProgram,
  TAccountTokenQuoteProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    tokenAAccount: { value: input.tokenAAccount ?? null, isWritable: true },
    tokenBAccount: { value: input.tokenBAccount ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.tokenAAccount),
      getAccountMeta(accounts.tokenBAccount),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimTradingFeeInstructionDataEncoder().encode(
      args as ClaimTradingFeeInstructionDataArgs
    ),
  } as ClaimTradingFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountTokenAAccount,
    TAccountTokenBAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimTradingFeeInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    config: TAccountMetas[1];
    pool: TAccountMetas[2];
    /** The treasury token a account */
    tokenAAccount: TAccountMetas[3];
    /** The treasury token b account */
    tokenBAccount: TAccountMetas[4];
    /** The vault token account for input token */
    baseVault: TAccountMetas[5];
    /** The vault token account for output token */
    quoteVault: TAccountMetas[6];
    /** The mint of token a */
    baseMint: TAccountMetas[7];
    /** The mint of token b */
    quoteMint: TAccountMetas[8];
    feeClaimer: TAccountMetas[9];
    /** Token a program */
    tokenBaseProgram: TAccountMetas[10];
    /** Token b program */
    tokenQuoteProgram: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: ClaimTradingFeeInstructionData;
};

export function parseClaimTradingFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimTradingFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      config: getNextAccount(),
      pool: getNextAccount(),
      tokenAAccount: getNextAccount(),
      tokenBAccount: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      feeClaimer: getNextAccount(),
      tokenBaseProgram: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimTradingFeeInstructionDataDecoder().decode(instruction.data),
  };
}
