/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PARTNER_WITHDRAW_SURPLUS_DISCRIMINATOR = new Uint8Array([
  168, 173, 72, 100, 201, 98, 38, 92,
]);

export function getPartnerWithdrawSurplusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PARTNER_WITHDRAW_SURPLUS_DISCRIMINATOR
  );
}

export type PartnerWithdrawSurplusInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVirtualPool extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountFeeClaimer extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVirtualPool extends string
        ? WritableAccount<TAccountVirtualPool>
        : TAccountVirtualPool,
      TAccountTokenQuoteAccount extends string
        ? WritableAccount<TAccountTokenQuoteAccount>
        : TAccountTokenQuoteAccount,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountFeeClaimer extends string
        ? ReadonlySignerAccount<TAccountFeeClaimer> &
            IAccountSignerMeta<TAccountFeeClaimer>
        : TAccountFeeClaimer,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PartnerWithdrawSurplusInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type PartnerWithdrawSurplusInstructionDataArgs = {};

export function getPartnerWithdrawSurplusInstructionDataEncoder(): Encoder<PartnerWithdrawSurplusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: PARTNER_WITHDRAW_SURPLUS_DISCRIMINATOR,
    })
  );
}

export function getPartnerWithdrawSurplusInstructionDataDecoder(): Decoder<PartnerWithdrawSurplusInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPartnerWithdrawSurplusInstructionDataCodec(): Codec<
  PartnerWithdrawSurplusInstructionDataArgs,
  PartnerWithdrawSurplusInstructionData
> {
  return combineCodec(
    getPartnerWithdrawSurplusInstructionDataEncoder(),
    getPartnerWithdrawSurplusInstructionDataDecoder()
  );
}

export type PartnerWithdrawSurplusAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountVirtualPool extends string = string,
  TAccountTokenQuoteAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  virtualPool: Address<TAccountVirtualPool>;
  /** The receiver token account */
  tokenQuoteAccount: Address<TAccountTokenQuoteAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getPartnerWithdrawSurplusInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountVirtualPool extends string,
  TAccountTokenQuoteAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: PartnerWithdrawSurplusAsyncInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountVirtualPool,
    TAccountTokenQuoteAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PartnerWithdrawSurplusInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountVirtualPool,
    TAccountTokenQuoteAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    virtualPool: { value: input.virtualPool ?? null, isWritable: true },
    tokenQuoteAccount: {
      value: input.tokenQuoteAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.tokenQuoteAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getPartnerWithdrawSurplusInstructionDataEncoder().encode({}),
  } as PartnerWithdrawSurplusInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountVirtualPool,
    TAccountTokenQuoteAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type PartnerWithdrawSurplusInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountVirtualPool extends string = string,
  TAccountTokenQuoteAccount extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  virtualPool: Address<TAccountVirtualPool>;
  /** The receiver token account */
  tokenQuoteAccount: Address<TAccountTokenQuoteAccount>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  feeClaimer: TransactionSigner<TAccountFeeClaimer>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getPartnerWithdrawSurplusInstruction<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountVirtualPool extends string,
  TAccountTokenQuoteAccount extends string,
  TAccountQuoteVault extends string,
  TAccountQuoteMint extends string,
  TAccountFeeClaimer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: PartnerWithdrawSurplusInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountVirtualPool,
    TAccountTokenQuoteAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PartnerWithdrawSurplusInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountConfig,
  TAccountVirtualPool,
  TAccountTokenQuoteAccount,
  TAccountQuoteVault,
  TAccountQuoteMint,
  TAccountFeeClaimer,
  TAccountTokenQuoteProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    virtualPool: { value: input.virtualPool ?? null, isWritable: true },
    tokenQuoteAccount: {
      value: input.tokenQuoteAccount ?? null,
      isWritable: true,
    },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.tokenQuoteAccount),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getPartnerWithdrawSurplusInstructionDataEncoder().encode({}),
  } as PartnerWithdrawSurplusInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountVirtualPool,
    TAccountTokenQuoteAccount,
    TAccountQuoteVault,
    TAccountQuoteMint,
    TAccountFeeClaimer,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedPartnerWithdrawSurplusInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    config: TAccountMetas[1];
    virtualPool: TAccountMetas[2];
    /** The receiver token account */
    tokenQuoteAccount: TAccountMetas[3];
    /** The vault token account for output token */
    quoteVault: TAccountMetas[4];
    /** The mint of quote token */
    quoteMint: TAccountMetas[5];
    feeClaimer: TAccountMetas[6];
    /** Token b program */
    tokenQuoteProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: PartnerWithdrawSurplusInstructionData;
};

export function parsePartnerWithdrawSurplusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPartnerWithdrawSurplusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      config: getNextAccount(),
      virtualPool: getNextAccount(),
      tokenQuoteAccount: getNextAccount(),
      quoteVault: getNextAccount(),
      quoteMint: getNextAccount(),
      feeClaimer: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getPartnerWithdrawSurplusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
