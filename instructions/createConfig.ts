/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getLiquidityDistributionParametersDecoder,
  getLiquidityDistributionParametersEncoder,
  getPoolFeeParamtersDecoder,
  getPoolFeeParamtersEncoder,
  type LiquidityDistributionParameters,
  type LiquidityDistributionParametersArgs,
  type PoolFeeParamters,
  type PoolFeeParamtersArgs,
} from '../types';

export const CREATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  201, 207, 243, 114, 75, 111, 47, 189,
]);

export function getCreateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CONFIG_DISCRIMINATOR
  );
}

export type CreateConfigInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountFeeClaimer extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableSignerAccount<TAccountConfig> &
            IAccountSignerMeta<TAccountConfig>
        : TAccountConfig,
      TAccountFeeClaimer extends string
        ? ReadonlyAccount<TAccountFeeClaimer>
        : TAccountFeeClaimer,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  poolFees: PoolFeeParamters;
  collectFeeMode: number;
  migrationOption: number;
  activationType: number;
  tokenType: number;
  tokenDecimal: number;
  creatorPostMigrationFeePercentage: number;
  migrationQuoteThreshold: bigint;
  sqrtStartPrice: bigint;
  /** padding for future use */
  padding: Array<bigint>;
  curve: Array<LiquidityDistributionParameters>;
};

export type CreateConfigInstructionDataArgs = {
  poolFees: PoolFeeParamtersArgs;
  collectFeeMode: number;
  migrationOption: number;
  activationType: number;
  tokenType: number;
  tokenDecimal: number;
  creatorPostMigrationFeePercentage: number;
  migrationQuoteThreshold: number | bigint;
  sqrtStartPrice: number | bigint;
  /** padding for future use */
  padding: Array<number | bigint>;
  curve: Array<LiquidityDistributionParametersArgs>;
};

export function getCreateConfigInstructionDataEncoder(): Encoder<CreateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolFees', getPoolFeeParamtersEncoder()],
      ['collectFeeMode', getU8Encoder()],
      ['migrationOption', getU8Encoder()],
      ['activationType', getU8Encoder()],
      ['tokenType', getU8Encoder()],
      ['tokenDecimal', getU8Encoder()],
      ['creatorPostMigrationFeePercentage', getU8Encoder()],
      ['migrationQuoteThreshold', getU64Encoder()],
      ['sqrtStartPrice', getU128Encoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 6 })],
      ['curve', getArrayEncoder(getLiquidityDistributionParametersEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateConfigInstructionDataDecoder(): Decoder<CreateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolFees', getPoolFeeParamtersDecoder()],
    ['collectFeeMode', getU8Decoder()],
    ['migrationOption', getU8Decoder()],
    ['activationType', getU8Decoder()],
    ['tokenType', getU8Decoder()],
    ['tokenDecimal', getU8Decoder()],
    ['creatorPostMigrationFeePercentage', getU8Decoder()],
    ['migrationQuoteThreshold', getU64Decoder()],
    ['sqrtStartPrice', getU128Decoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 6 })],
    ['curve', getArrayDecoder(getLiquidityDistributionParametersDecoder())],
  ]);
}

export function getCreateConfigInstructionDataCodec(): Codec<
  CreateConfigInstructionDataArgs,
  CreateConfigInstructionData
> {
  return combineCodec(
    getCreateConfigInstructionDataEncoder(),
    getCreateConfigInstructionDataDecoder()
  );
}

export type CreateConfigAsyncInput<
  TAccountConfig extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountOwner extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: TransactionSigner<TAccountConfig>;
  feeClaimer: Address<TAccountFeeClaimer>;
  owner: Address<TAccountOwner>;
  /** quote mint */
  quoteMint: Address<TAccountQuoteMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  poolFees: CreateConfigInstructionDataArgs['poolFees'];
  collectFeeMode: CreateConfigInstructionDataArgs['collectFeeMode'];
  migrationOption: CreateConfigInstructionDataArgs['migrationOption'];
  activationType: CreateConfigInstructionDataArgs['activationType'];
  tokenType: CreateConfigInstructionDataArgs['tokenType'];
  tokenDecimal: CreateConfigInstructionDataArgs['tokenDecimal'];
  creatorPostMigrationFeePercentage: CreateConfigInstructionDataArgs['creatorPostMigrationFeePercentage'];
  migrationQuoteThreshold: CreateConfigInstructionDataArgs['migrationQuoteThreshold'];
  sqrtStartPrice: CreateConfigInstructionDataArgs['sqrtStartPrice'];
  padding: CreateConfigInstructionDataArgs['padding'];
  curve: CreateConfigInstructionDataArgs['curve'];
};

export async function getCreateConfigInstructionAsync<
  TAccountConfig extends string,
  TAccountFeeClaimer extends string,
  TAccountOwner extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: CreateConfigAsyncInput<
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountOwner,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountOwner,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountOwner,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type CreateConfigInput<
  TAccountConfig extends string = string,
  TAccountFeeClaimer extends string = string,
  TAccountOwner extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  config: TransactionSigner<TAccountConfig>;
  feeClaimer: Address<TAccountFeeClaimer>;
  owner: Address<TAccountOwner>;
  /** quote mint */
  quoteMint: Address<TAccountQuoteMint>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  poolFees: CreateConfigInstructionDataArgs['poolFees'];
  collectFeeMode: CreateConfigInstructionDataArgs['collectFeeMode'];
  migrationOption: CreateConfigInstructionDataArgs['migrationOption'];
  activationType: CreateConfigInstructionDataArgs['activationType'];
  tokenType: CreateConfigInstructionDataArgs['tokenType'];
  tokenDecimal: CreateConfigInstructionDataArgs['tokenDecimal'];
  creatorPostMigrationFeePercentage: CreateConfigInstructionDataArgs['creatorPostMigrationFeePercentage'];
  migrationQuoteThreshold: CreateConfigInstructionDataArgs['migrationQuoteThreshold'];
  sqrtStartPrice: CreateConfigInstructionDataArgs['sqrtStartPrice'];
  padding: CreateConfigInstructionDataArgs['padding'];
  curve: CreateConfigInstructionDataArgs['curve'];
};

export function getCreateConfigInstruction<
  TAccountConfig extends string,
  TAccountFeeClaimer extends string,
  TAccountOwner extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: CreateConfigInput<
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountOwner,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountFeeClaimer,
  TAccountOwner,
  TAccountQuoteMint,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    feeClaimer: { value: input.feeClaimer ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.feeClaimer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountFeeClaimer,
    TAccountOwner,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateConfigInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    feeClaimer: TAccountMetas[1];
    owner: TAccountMetas[2];
    /** quote mint */
    quoteMint: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    eventAuthority: TAccountMetas[6];
    program: TAccountMetas[7];
  };
  data: CreateConfigInstructionData;
};

export function parseCreateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      feeClaimer: getNextAccount(),
      owner: getNextAccount(),
      quoteMint: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
