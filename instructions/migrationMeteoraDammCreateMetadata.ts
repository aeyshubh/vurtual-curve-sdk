/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MIGRATION_METEORA_DAMM_CREATE_METADATA_DISCRIMINATOR =
  new Uint8Array([47, 94, 126, 115, 221, 226, 194, 133]);

export function getMigrationMeteoraDammCreateMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATION_METEORA_DAMM_CREATE_METADATA_DISCRIMINATOR
  );
}

export type MigrationMeteoraDammCreateMetadataInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountVirtualPool extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountMigrationMetadata extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVirtualPool extends string
        ? ReadonlyAccount<TAccountVirtualPool>
        : TAccountVirtualPool,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMigrationMetadata extends string
        ? WritableAccount<TAccountMigrationMetadata>
        : TAccountMigrationMetadata,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrationMeteoraDammCreateMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MigrationMeteoraDammCreateMetadataInstructionDataArgs = {};

export function getMigrationMeteoraDammCreateMetadataInstructionDataEncoder(): Encoder<MigrationMeteoraDammCreateMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: MIGRATION_METEORA_DAMM_CREATE_METADATA_DISCRIMINATOR,
    })
  );
}

export function getMigrationMeteoraDammCreateMetadataInstructionDataDecoder(): Decoder<MigrationMeteoraDammCreateMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMigrationMeteoraDammCreateMetadataInstructionDataCodec(): Codec<
  MigrationMeteoraDammCreateMetadataInstructionDataArgs,
  MigrationMeteoraDammCreateMetadataInstructionData
> {
  return combineCodec(
    getMigrationMeteoraDammCreateMetadataInstructionDataEncoder(),
    getMigrationMeteoraDammCreateMetadataInstructionDataDecoder()
  );
}

export type MigrationMeteoraDammCreateMetadataAsyncInput<
  TAccountVirtualPool extends string = string,
  TAccountConfig extends string = string,
  TAccountMigrationMetadata extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  virtualPool: Address<TAccountVirtualPool>;
  config: Address<TAccountConfig>;
  migrationMetadata?: Address<TAccountMigrationMetadata>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getMigrationMeteoraDammCreateMetadataInstructionAsync<
  TAccountVirtualPool extends string,
  TAccountConfig extends string,
  TAccountMigrationMetadata extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrationMeteoraDammCreateMetadataAsyncInput<
    TAccountVirtualPool,
    TAccountConfig,
    TAccountMigrationMetadata,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrationMeteoraDammCreateMetadataInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountConfig,
    TAccountMigrationMetadata,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    virtualPool: { value: input.virtualPool ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.migrationMetadata.value) {
    accounts.migrationMetadata.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 101, 111, 114, 97])
        ),
        getAddressEncoder().encode(expectAddress(accounts.virtualPool.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getMigrationMeteoraDammCreateMetadataInstructionDataEncoder().encode(
      {}
    ),
  } as MigrationMeteoraDammCreateMetadataInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountConfig,
    TAccountMigrationMetadata,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type MigrationMeteoraDammCreateMetadataInput<
  TAccountVirtualPool extends string = string,
  TAccountConfig extends string = string,
  TAccountMigrationMetadata extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  virtualPool: Address<TAccountVirtualPool>;
  config: Address<TAccountConfig>;
  migrationMetadata: Address<TAccountMigrationMetadata>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getMigrationMeteoraDammCreateMetadataInstruction<
  TAccountVirtualPool extends string,
  TAccountConfig extends string,
  TAccountMigrationMetadata extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrationMeteoraDammCreateMetadataInput<
    TAccountVirtualPool,
    TAccountConfig,
    TAccountMigrationMetadata,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrationMeteoraDammCreateMetadataInstruction<
  TProgramAddress,
  TAccountVirtualPool,
  TAccountConfig,
  TAccountMigrationMetadata,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    virtualPool: { value: input.virtualPool ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getMigrationMeteoraDammCreateMetadataInstructionDataEncoder().encode(
      {}
    ),
  } as MigrationMeteoraDammCreateMetadataInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountConfig,
    TAccountMigrationMetadata,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedMigrationMeteoraDammCreateMetadataInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    virtualPool: TAccountMetas[0];
    config: TAccountMetas[1];
    migrationMetadata: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    eventAuthority: TAccountMetas[5];
    program: TAccountMetas[6];
  };
  data: MigrationMeteoraDammCreateMetadataInstructionData;
};

export function parseMigrationMeteoraDammCreateMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMigrationMeteoraDammCreateMetadataInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      virtualPool: getNextAccount(),
      config: getNextAccount(),
      migrationMetadata: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getMigrationMeteoraDammCreateMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
