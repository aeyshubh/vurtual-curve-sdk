/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_PROTOCOL_FEE_DISCRIMINATOR = new Uint8Array([
  165, 228, 133, 48, 99, 249, 255, 33,
]);

export function getClaimProtocolFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_PROTOCOL_FEE_DISCRIMINATOR
  );
}

export type ClaimProtocolFeeInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountTokenBaseAccount extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountClaimFeeOperator extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountTokenBaseProgram extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountTokenBaseAccount extends string
        ? WritableAccount<TAccountTokenBaseAccount>
        : TAccountTokenBaseAccount,
      TAccountTokenQuoteAccount extends string
        ? WritableAccount<TAccountTokenQuoteAccount>
        : TAccountTokenQuoteAccount,
      TAccountClaimFeeOperator extends string
        ? ReadonlyAccount<TAccountClaimFeeOperator>
        : TAccountClaimFeeOperator,
      TAccountOperator extends string
        ? ReadonlySignerAccount<TAccountOperator> &
            IAccountSignerMeta<TAccountOperator>
        : TAccountOperator,
      TAccountTokenBaseProgram extends string
        ? ReadonlyAccount<TAccountTokenBaseProgram>
        : TAccountTokenBaseProgram,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimProtocolFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimProtocolFeeInstructionDataArgs = {};

export function getClaimProtocolFeeInstructionDataEncoder(): Encoder<ClaimProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_PROTOCOL_FEE_DISCRIMINATOR })
  );
}

export function getClaimProtocolFeeInstructionDataDecoder(): Decoder<ClaimProtocolFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimProtocolFeeInstructionDataCodec(): Codec<
  ClaimProtocolFeeInstructionDataArgs,
  ClaimProtocolFeeInstructionData
> {
  return combineCodec(
    getClaimProtocolFeeInstructionDataEncoder(),
    getClaimProtocolFeeInstructionDataDecoder()
  );
}

export type ClaimProtocolFeeAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenBaseAccount extends string = string,
  TAccountTokenQuoteAccount extends string = string,
  TAccountClaimFeeOperator extends string = string,
  TAccountOperator extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  pool: Address<TAccountPool>;
  /** The vault token account for input token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of token a */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of token b */
  quoteMint: Address<TAccountQuoteMint>;
  /** The treasury token a account */
  tokenBaseAccount?: Address<TAccountTokenBaseAccount>;
  /** The treasury token b account */
  tokenQuoteAccount?: Address<TAccountTokenQuoteAccount>;
  /** Claim fee operator */
  claimFeeOperator: Address<TAccountClaimFeeOperator>;
  /** Operator */
  operator: TransactionSigner<TAccountOperator>;
  /** Token a program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getClaimProtocolFeeInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountTokenBaseAccount extends string,
  TAccountTokenQuoteAccount extends string,
  TAccountClaimFeeOperator extends string,
  TAccountOperator extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: ClaimProtocolFeeAsyncInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenBaseAccount,
    TAccountTokenQuoteAccount,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenBaseAccount,
    TAccountTokenQuoteAccount,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    tokenBaseAccount: {
      value: input.tokenBaseAccount ?? null,
      isWritable: true,
    },
    tokenQuoteAccount: {
      value: input.tokenQuoteAccount ?? null,
      isWritable: true,
    },
    claimFeeOperator: {
      value: input.claimFeeOperator ?? null,
      isWritable: false,
    },
    operator: { value: input.operator ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenBaseAccount.value) {
    accounts.tokenBaseAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            153, 10, 107, 154, 255, 249, 210, 173, 176, 67, 220, 214, 152, 71,
            46, 146, 161, 33, 81, 148, 166, 119, 5, 189, 142, 11, 57, 68, 162,
            70, 126, 100,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenBaseProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.tokenQuoteAccount.value) {
    accounts.tokenQuoteAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            153, 10, 107, 154, 255, 249, 210, 173, 176, 67, 220, 214, 152, 71,
            46, 146, 161, 33, 81, 148, 166, 119, 5, 189, 142, 11, 57, 68, 162,
            70, 126, 100,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenQuoteProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenBaseAccount),
      getAccountMeta(accounts.tokenQuoteAccount),
      getAccountMeta(accounts.claimFeeOperator),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimProtocolFeeInstructionDataEncoder().encode({}),
  } as ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenBaseAccount,
    TAccountTokenQuoteAccount,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimProtocolFeeInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountTokenBaseAccount extends string = string,
  TAccountTokenQuoteAccount extends string = string,
  TAccountClaimFeeOperator extends string = string,
  TAccountOperator extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority: Address<TAccountPoolAuthority>;
  config: Address<TAccountConfig>;
  pool: Address<TAccountPool>;
  /** The vault token account for input token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for output token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of token a */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of token b */
  quoteMint: Address<TAccountQuoteMint>;
  /** The treasury token a account */
  tokenBaseAccount: Address<TAccountTokenBaseAccount>;
  /** The treasury token b account */
  tokenQuoteAccount: Address<TAccountTokenQuoteAccount>;
  /** Claim fee operator */
  claimFeeOperator: Address<TAccountClaimFeeOperator>;
  /** Operator */
  operator: TransactionSigner<TAccountOperator>;
  /** Token a program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token b program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getClaimProtocolFeeInstruction<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountTokenBaseAccount extends string,
  TAccountTokenQuoteAccount extends string,
  TAccountClaimFeeOperator extends string,
  TAccountOperator extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: ClaimProtocolFeeInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenBaseAccount,
    TAccountTokenQuoteAccount,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimProtocolFeeInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountConfig,
  TAccountPool,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountTokenBaseAccount,
  TAccountTokenQuoteAccount,
  TAccountClaimFeeOperator,
  TAccountOperator,
  TAccountTokenBaseProgram,
  TAccountTokenQuoteProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    tokenBaseAccount: {
      value: input.tokenBaseAccount ?? null,
      isWritable: true,
    },
    tokenQuoteAccount: {
      value: input.tokenQuoteAccount ?? null,
      isWritable: true,
    },
    claimFeeOperator: {
      value: input.claimFeeOperator ?? null,
      isWritable: false,
    },
    operator: { value: input.operator ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.tokenBaseAccount),
      getAccountMeta(accounts.tokenQuoteAccount),
      getAccountMeta(accounts.claimFeeOperator),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimProtocolFeeInstructionDataEncoder().encode({}),
  } as ClaimProtocolFeeInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountTokenBaseAccount,
    TAccountTokenQuoteAccount,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimProtocolFeeInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    config: TAccountMetas[1];
    pool: TAccountMetas[2];
    /** The vault token account for input token */
    baseVault: TAccountMetas[3];
    /** The vault token account for output token */
    quoteVault: TAccountMetas[4];
    /** The mint of token a */
    baseMint: TAccountMetas[5];
    /** The mint of token b */
    quoteMint: TAccountMetas[6];
    /** The treasury token a account */
    tokenBaseAccount: TAccountMetas[7];
    /** The treasury token b account */
    tokenQuoteAccount: TAccountMetas[8];
    /** Claim fee operator */
    claimFeeOperator: TAccountMetas[9];
    /** Operator */
    operator: TAccountMetas[10];
    /** Token a program */
    tokenBaseProgram: TAccountMetas[11];
    /** Token b program */
    tokenQuoteProgram: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: ClaimProtocolFeeInstructionData;
};

export function parseClaimProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      config: getNextAccount(),
      pool: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      tokenBaseAccount: getNextAccount(),
      tokenQuoteAccount: getNextAccount(),
      claimFeeOperator: getNextAccount(),
      operator: getNextAccount(),
      tokenBaseProgram: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimProtocolFeeInstructionDataDecoder().decode(instruction.data),
  };
}
