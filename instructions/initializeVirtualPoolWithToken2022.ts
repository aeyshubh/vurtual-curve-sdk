/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getInitializePoolParametersDecoder,
  getInitializePoolParametersEncoder,
  type InitializePoolParameters,
  type InitializePoolParametersArgs,
} from '../types';

export const INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_DISCRIMINATOR =
  new Uint8Array([169, 118, 51, 78, 145, 110, 220, 155]);

export function getInitializeVirtualPoolWithToken2022DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_DISCRIMINATOR
  );
}

export type InitializeVirtualPoolWithToken2022Instruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountCreator extends string
        ? ReadonlyAccount<TAccountCreator>
        : TAccountCreator,
      TAccountBaseMint extends string
        ? WritableSignerAccount<TAccountBaseMint> &
            IAccountSignerMeta<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeVirtualPoolWithToken2022InstructionData = {
  discriminator: ReadonlyUint8Array;
  params: InitializePoolParameters;
};

export type InitializeVirtualPoolWithToken2022InstructionDataArgs = {
  params: InitializePoolParametersArgs;
};

export function getInitializeVirtualPoolWithToken2022InstructionDataEncoder(): Encoder<InitializeVirtualPoolWithToken2022InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getInitializePoolParametersEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_VIRTUAL_POOL_WITH_TOKEN2022_DISCRIMINATOR,
    })
  );
}

export function getInitializeVirtualPoolWithToken2022InstructionDataDecoder(): Decoder<InitializeVirtualPoolWithToken2022InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getInitializePoolParametersDecoder()],
  ]);
}

export function getInitializeVirtualPoolWithToken2022InstructionDataCodec(): Codec<
  InitializeVirtualPoolWithToken2022InstructionDataArgs,
  InitializeVirtualPoolWithToken2022InstructionData
> {
  return combineCodec(
    getInitializeVirtualPoolWithToken2022InstructionDataEncoder(),
    getInitializeVirtualPoolWithToken2022InstructionDataDecoder()
  );
}

export type InitializeVirtualPoolWithToken2022AsyncInput<
  TAccountConfig extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPool extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Which config the pool belongs to. */
  config: Address<TAccountConfig>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  creator: Address<TAccountCreator>;
  /** Unique token mint address, initialize in contract */
  baseMint: TransactionSigner<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Initialize an account to store the pool state */
  pool: Address<TAccountPool>;
  baseVault?: Address<TAccountBaseVault>;
  /** Token quote vault for the pool */
  quoteVault?: Address<TAccountQuoteVault>;
  /** Address paying to create the pool. Can be anyone */
  payer: TransactionSigner<TAccountPayer>;
  /** Program to create mint account and mint tokens */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  /** token program for base mint */
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: InitializeVirtualPoolWithToken2022InstructionDataArgs['params'];
};

export async function getInitializeVirtualPoolWithToken2022InstructionAsync<
  TAccountConfig extends string,
  TAccountPoolAuthority extends string,
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPool extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPayer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: InitializeVirtualPoolWithToken2022AsyncInput<
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPayer,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeVirtualPoolWithToken2022Instruction<
    TProgramAddress,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPayer,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.baseVault.value) {
    accounts.baseVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.quoteVault.value) {
    accounts.quoteVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 118, 97, 117, 108, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getInitializeVirtualPoolWithToken2022InstructionDataEncoder().encode(
      args as InitializeVirtualPoolWithToken2022InstructionDataArgs
    ),
  } as InitializeVirtualPoolWithToken2022Instruction<
    TProgramAddress,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPayer,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type InitializeVirtualPoolWithToken2022Input<
  TAccountConfig extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPool extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Which config the pool belongs to. */
  config: Address<TAccountConfig>;
  poolAuthority: Address<TAccountPoolAuthority>;
  creator: Address<TAccountCreator>;
  /** Unique token mint address, initialize in contract */
  baseMint: TransactionSigner<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Initialize an account to store the pool state */
  pool: Address<TAccountPool>;
  baseVault: Address<TAccountBaseVault>;
  /** Token quote vault for the pool */
  quoteVault: Address<TAccountQuoteVault>;
  /** Address paying to create the pool. Can be anyone */
  payer: TransactionSigner<TAccountPayer>;
  /** Program to create mint account and mint tokens */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  /** token program for base mint */
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: InitializeVirtualPoolWithToken2022InstructionDataArgs['params'];
};

export function getInitializeVirtualPoolWithToken2022Instruction<
  TAccountConfig extends string,
  TAccountPoolAuthority extends string,
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPool extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountPayer extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: InitializeVirtualPoolWithToken2022Input<
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPayer,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeVirtualPoolWithToken2022Instruction<
  TProgramAddress,
  TAccountConfig,
  TAccountPoolAuthority,
  TAccountCreator,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountPool,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountPayer,
  TAccountTokenQuoteProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: true },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getInitializeVirtualPoolWithToken2022InstructionDataEncoder().encode(
      args as InitializeVirtualPoolWithToken2022InstructionDataArgs
    ),
  } as InitializeVirtualPoolWithToken2022Instruction<
    TProgramAddress,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPool,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountPayer,
    TAccountTokenQuoteProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedInitializeVirtualPoolWithToken2022Instruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Which config the pool belongs to. */
    config: TAccountMetas[0];
    poolAuthority: TAccountMetas[1];
    creator: TAccountMetas[2];
    /** Unique token mint address, initialize in contract */
    baseMint: TAccountMetas[3];
    quoteMint: TAccountMetas[4];
    /** Initialize an account to store the pool state */
    pool: TAccountMetas[5];
    baseVault: TAccountMetas[6];
    /** Token quote vault for the pool */
    quoteVault: TAccountMetas[7];
    /** Address paying to create the pool. Can be anyone */
    payer: TAccountMetas[8];
    /** Program to create mint account and mint tokens */
    tokenQuoteProgram: TAccountMetas[9];
    /** token program for base mint */
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: InitializeVirtualPoolWithToken2022InstructionData;
};

export function parseInitializeVirtualPoolWithToken2022Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeVirtualPoolWithToken2022Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      poolAuthority: getNextAccount(),
      creator: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      pool: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      payer: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeVirtualPoolWithToken2022InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
