/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSwapParametersDecoder,
  getSwapParametersEncoder,
  type SwapParameters,
  type SwapParametersArgs,
} from '../types';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountInputTokenAccount extends string | IAccountMeta<string> = string,
  TAccountOutputTokenAccount extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenBaseProgram extends string | IAccountMeta<string> = string,
  TAccountTokenQuoteProgram extends string | IAccountMeta<string> = string,
  TAccountReferralTokenAccount extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPoolAuthority extends string
        ? ReadonlyAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountInputTokenAccount extends string
        ? WritableAccount<TAccountInputTokenAccount>
        : TAccountInputTokenAccount,
      TAccountOutputTokenAccount extends string
        ? WritableAccount<TAccountOutputTokenAccount>
        : TAccountOutputTokenAccount,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenBaseProgram extends string
        ? ReadonlyAccount<TAccountTokenBaseProgram>
        : TAccountTokenBaseProgram,
      TAccountTokenQuoteProgram extends string
        ? ReadonlyAccount<TAccountTokenQuoteProgram>
        : TAccountTokenQuoteProgram,
      TAccountReferralTokenAccount extends string
        ? WritableAccount<TAccountReferralTokenAccount>
        : TAccountReferralTokenAccount,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: SwapParameters;
};

export type SwapInstructionDataArgs = { params: SwapParametersArgs };

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getSwapParametersEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getSwapParametersDecoder()],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapAsyncInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountInputTokenAccount extends string = string,
  TAccountOutputTokenAccount extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountReferralTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority?: Address<TAccountPoolAuthority>;
  /** config key */
  config: Address<TAccountConfig>;
  /** Pool account */
  pool: Address<TAccountPool>;
  /** The user token account for input token */
  inputTokenAccount: Address<TAccountInputTokenAccount>;
  /** The user token account for output token */
  outputTokenAccount: Address<TAccountOutputTokenAccount>;
  /** The vault token account for base token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for quote token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of base token */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  /** Token base program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token quote program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  /** referral token account */
  referralTokenAccount?: Address<TAccountReferralTokenAccount>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SwapInstructionDataArgs['params'];
};

export async function getSwapInstructionAsync<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountInputTokenAccount extends string,
  TAccountOutputTokenAccount extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountReferralTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: SwapAsyncInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    inputTokenAccount: {
      value: input.inputTokenAccount ?? null,
      isWritable: true,
    },
    outputTokenAccount: {
      value: input.outputTokenAccount ?? null,
      isWritable: true,
    },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    referralTokenAccount: {
      value: input.referralTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.inputTokenAccount),
      getAccountMeta(accounts.outputTokenAccount),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.referralTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SwapInput<
  TAccountPoolAuthority extends string = string,
  TAccountConfig extends string = string,
  TAccountPool extends string = string,
  TAccountInputTokenAccount extends string = string,
  TAccountOutputTokenAccount extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenBaseProgram extends string = string,
  TAccountTokenQuoteProgram extends string = string,
  TAccountReferralTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  poolAuthority: Address<TAccountPoolAuthority>;
  /** config key */
  config: Address<TAccountConfig>;
  /** Pool account */
  pool: Address<TAccountPool>;
  /** The user token account for input token */
  inputTokenAccount: Address<TAccountInputTokenAccount>;
  /** The user token account for output token */
  outputTokenAccount: Address<TAccountOutputTokenAccount>;
  /** The vault token account for base token */
  baseVault: Address<TAccountBaseVault>;
  /** The vault token account for quote token */
  quoteVault: Address<TAccountQuoteVault>;
  /** The mint of base token */
  baseMint: Address<TAccountBaseMint>;
  /** The mint of quote token */
  quoteMint: Address<TAccountQuoteMint>;
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  /** Token base program */
  tokenBaseProgram: Address<TAccountTokenBaseProgram>;
  /** Token quote program */
  tokenQuoteProgram: Address<TAccountTokenQuoteProgram>;
  /** referral token account */
  referralTokenAccount?: Address<TAccountReferralTokenAccount>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SwapInstructionDataArgs['params'];
};

export function getSwapInstruction<
  TAccountPoolAuthority extends string,
  TAccountConfig extends string,
  TAccountPool extends string,
  TAccountInputTokenAccount extends string,
  TAccountOutputTokenAccount extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountPayer extends string,
  TAccountTokenBaseProgram extends string,
  TAccountTokenQuoteProgram extends string,
  TAccountReferralTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountPoolAuthority,
  TAccountConfig,
  TAccountPool,
  TAccountInputTokenAccount,
  TAccountOutputTokenAccount,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountPayer,
  TAccountTokenBaseProgram,
  TAccountTokenQuoteProgram,
  TAccountReferralTokenAccount,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    inputTokenAccount: {
      value: input.inputTokenAccount ?? null,
      isWritable: true,
    },
    outputTokenAccount: {
      value: input.outputTokenAccount ?? null,
      isWritable: true,
    },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    tokenBaseProgram: {
      value: input.tokenBaseProgram ?? null,
      isWritable: false,
    },
    tokenQuoteProgram: {
      value: input.tokenQuoteProgram ?? null,
      isWritable: false,
    },
    referralTokenAccount: {
      value: input.referralTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.inputTokenAccount),
      getAccountMeta(accounts.outputTokenAccount),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenBaseProgram),
      getAccountMeta(accounts.tokenQuoteProgram),
      getAccountMeta(accounts.referralTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPoolAuthority,
    TAccountConfig,
    TAccountPool,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountPayer,
    TAccountTokenBaseProgram,
    TAccountTokenQuoteProgram,
    TAccountReferralTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    poolAuthority: TAccountMetas[0];
    /** config key */
    config: TAccountMetas[1];
    /** Pool account */
    pool: TAccountMetas[2];
    /** The user token account for input token */
    inputTokenAccount: TAccountMetas[3];
    /** The user token account for output token */
    outputTokenAccount: TAccountMetas[4];
    /** The vault token account for base token */
    baseVault: TAccountMetas[5];
    /** The vault token account for quote token */
    quoteVault: TAccountMetas[6];
    /** The mint of base token */
    baseMint: TAccountMetas[7];
    /** The mint of quote token */
    quoteMint: TAccountMetas[8];
    /** The user performing the swap */
    payer: TAccountMetas[9];
    /** Token base program */
    tokenBaseProgram: TAccountMetas[10];
    /** Token quote program */
    tokenQuoteProgram: TAccountMetas[11];
    /** referral token account */
    referralTokenAccount?: TAccountMetas[12] | undefined;
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === VIRTUAL_CURVE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      poolAuthority: getNextAccount(),
      config: getNextAccount(),
      pool: getNextAccount(),
      inputTokenAccount: getNextAccount(),
      outputTokenAccount: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      payer: getNextAccount(),
      tokenBaseProgram: getNextAccount(),
      tokenQuoteProgram: getNextAccount(),
      referralTokenAccount: getNextOptionalAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
