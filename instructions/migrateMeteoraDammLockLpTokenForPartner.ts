/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MIGRATE_METEORA_DAMM_LOCK_LP_TOKEN_FOR_PARTNER_DISCRIMINATOR =
  new Uint8Array([14, 102, 240, 58, 161, 16, 166, 83]);

export function getMigrateMeteoraDammLockLpTokenForPartnerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATE_METEORA_DAMM_LOCK_LP_TOKEN_FOR_PARTNER_DISCRIMINATOR
  );
}

export type MigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMigrationMetadata extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountLockEscrow extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSourceTokens extends string | IAccountMeta<string> = string,
  TAccountEscrowVault extends string | IAccountMeta<string> = string,
  TAccountAmmProgram extends
    | string
    | IAccountMeta<string> = 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB',
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMigrationMetadata extends string
        ? WritableAccount<TAccountMigrationMetadata>
        : TAccountMigrationMetadata,
      TAccountPoolAuthority extends string
        ? WritableAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? ReadonlyAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountLockEscrow extends string
        ? WritableAccount<TAccountLockEscrow>
        : TAccountLockEscrow,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSourceTokens extends string
        ? WritableAccount<TAccountSourceTokens>
        : TAccountSourceTokens,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountAmmProgram extends string
        ? ReadonlyAccount<TAccountAmmProgram>
        : TAccountAmmProgram,
      TAccountAVault extends string
        ? ReadonlyAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? ReadonlyAccount<TAccountBVault>
        : TAccountBVault,
      TAccountAVaultLp extends string
        ? ReadonlyAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? ReadonlyAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountAVaultLpMint extends string
        ? ReadonlyAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? ReadonlyAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateMeteoraDammLockLpTokenForPartnerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MigrateMeteoraDammLockLpTokenForPartnerInstructionDataArgs = {};

export function getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataEncoder(): Encoder<MigrateMeteoraDammLockLpTokenForPartnerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator:
        MIGRATE_METEORA_DAMM_LOCK_LP_TOKEN_FOR_PARTNER_DISCRIMINATOR,
    })
  );
}

export function getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataDecoder(): Decoder<MigrateMeteoraDammLockLpTokenForPartnerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataCodec(): Codec<
  MigrateMeteoraDammLockLpTokenForPartnerInstructionDataArgs,
  MigrateMeteoraDammLockLpTokenForPartnerInstructionData
> {
  return combineCodec(
    getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataEncoder(),
    getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataDecoder()
  );
}

export type MigrateMeteoraDammLockLpTokenForPartnerAsyncInput<
  TAccountMigrationMetadata extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountLockEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountSourceTokens extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** presale */
  migrationMetadata: Address<TAccountMigrationMetadata>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  lpMint: Address<TAccountLpMint>;
  lockEscrow: Address<TAccountLockEscrow>;
  owner: Address<TAccountOwner>;
  sourceTokens?: Address<TAccountSourceTokens>;
  escrowVault: Address<TAccountEscrowVault>;
  ammProgram?: Address<TAccountAmmProgram>;
  aVault: Address<TAccountAVault>;
  bVault: Address<TAccountBVault>;
  aVaultLp: Address<TAccountAVaultLp>;
  bVaultLp: Address<TAccountBVaultLp>;
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getMigrateMeteoraDammLockLpTokenForPartnerInstructionAsync<
  TAccountMigrationMetadata extends string,
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountLockEscrow extends string,
  TAccountOwner extends string,
  TAccountSourceTokens extends string,
  TAccountEscrowVault extends string,
  TAccountAmmProgram extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrateMeteoraDammLockLpTokenForPartnerAsyncInput<
    TAccountMigrationMetadata,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountAmmProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateMeteoraDammLockLpTokenForPartnerInstruction<
    TProgramAddress,
    TAccountMigrationMetadata,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountAmmProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    lockEscrow: { value: input.lockEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    sourceTokens: { value: input.sourceTokens ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: false },
    bVault: { value: input.bVault ?? null, isWritable: false },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: false },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: false },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: false },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.sourceTokens.value) {
    accounts.sourceTokens.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.poolAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.migrationMetadata.value)
        ),
      ],
    });
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB' as Address<'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.lockEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sourceTokens),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataEncoder().encode(
      {}
    ),
  } as MigrateMeteoraDammLockLpTokenForPartnerInstruction<
    TProgramAddress,
    TAccountMigrationMetadata,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountAmmProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type MigrateMeteoraDammLockLpTokenForPartnerInput<
  TAccountMigrationMetadata extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountLockEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountSourceTokens extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** presale */
  migrationMetadata: Address<TAccountMigrationMetadata>;
  poolAuthority: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  lpMint: Address<TAccountLpMint>;
  lockEscrow: Address<TAccountLockEscrow>;
  owner: Address<TAccountOwner>;
  sourceTokens: Address<TAccountSourceTokens>;
  escrowVault: Address<TAccountEscrowVault>;
  ammProgram?: Address<TAccountAmmProgram>;
  aVault: Address<TAccountAVault>;
  bVault: Address<TAccountBVault>;
  aVaultLp: Address<TAccountAVaultLp>;
  bVaultLp: Address<TAccountBVaultLp>;
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getMigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TAccountMigrationMetadata extends string,
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountLockEscrow extends string,
  TAccountOwner extends string,
  TAccountSourceTokens extends string,
  TAccountEscrowVault extends string,
  TAccountAmmProgram extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrateMeteoraDammLockLpTokenForPartnerInput<
    TAccountMigrationMetadata,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountAmmProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TProgramAddress,
  TAccountMigrationMetadata,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountLpMint,
  TAccountLockEscrow,
  TAccountOwner,
  TAccountSourceTokens,
  TAccountEscrowVault,
  TAccountAmmProgram,
  TAccountAVault,
  TAccountBVault,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    lockEscrow: { value: input.lockEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    sourceTokens: { value: input.sourceTokens ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: false },
    bVault: { value: input.bVault ?? null, isWritable: false },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: false },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: false },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: false },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB' as Address<'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.lockEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sourceTokens),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataEncoder().encode(
      {}
    ),
  } as MigrateMeteoraDammLockLpTokenForPartnerInstruction<
    TProgramAddress,
    TAccountMigrationMetadata,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountAmmProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedMigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** presale */
    migrationMetadata: TAccountMetas[0];
    poolAuthority: TAccountMetas[1];
    pool: TAccountMetas[2];
    lpMint: TAccountMetas[3];
    lockEscrow: TAccountMetas[4];
    owner: TAccountMetas[5];
    sourceTokens: TAccountMetas[6];
    escrowVault: TAccountMetas[7];
    ammProgram: TAccountMetas[8];
    aVault: TAccountMetas[9];
    bVault: TAccountMetas[10];
    aVaultLp: TAccountMetas[11];
    bVaultLp: TAccountMetas[12];
    aVaultLpMint: TAccountMetas[13];
    bVaultLpMint: TAccountMetas[14];
    /** token_program */
    tokenProgram: TAccountMetas[15];
  };
  data: MigrateMeteoraDammLockLpTokenForPartnerInstructionData;
};

export function parseMigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMigrateMeteoraDammLockLpTokenForPartnerInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      migrationMetadata: getNextAccount(),
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      lockEscrow: getNextAccount(),
      owner: getNextAccount(),
      sourceTokens: getNextAccount(),
      escrowVault: getNextAccount(),
      ammProgram: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getMigrateMeteoraDammLockLpTokenForPartnerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
