/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VIRTUAL_CURVE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MIGRATE_METEORA_DAMM_DISCRIMINATOR = new Uint8Array([
  27, 1, 48, 22, 180, 63, 118, 217,
]);

export function getMigrateMeteoraDammDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MIGRATE_METEORA_DAMM_DISCRIMINATOR
  );
}

export type MigrateMeteoraDammInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountVirtualPool extends string | IAccountMeta<string> = string,
  TAccountMigrationMetadata extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPoolAuthority extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountDammConfig extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountTokenAMint extends string | IAccountMeta<string> = string,
  TAccountTokenBMint extends string | IAccountMeta<string> = string,
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountATokenVault extends string | IAccountMeta<string> = string,
  TAccountBTokenVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountVirtualPoolLp extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenAFee extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenBFee extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMintMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadataProgram extends string | IAccountMeta<string> = string,
  TAccountAmmProgram extends
    | string
    | IAccountMeta<string> = 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB',
  TAccountVaultProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVirtualPool extends string
        ? WritableAccount<TAccountVirtualPool>
        : TAccountVirtualPool,
      TAccountMigrationMetadata extends string
        ? WritableAccount<TAccountMigrationMetadata>
        : TAccountMigrationMetadata,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPoolAuthority extends string
        ? WritableAccount<TAccountPoolAuthority>
        : TAccountPoolAuthority,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountDammConfig extends string
        ? ReadonlyAccount<TAccountDammConfig>
        : TAccountDammConfig,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountTokenAMint extends string
        ? WritableAccount<TAccountTokenAMint>
        : TAccountTokenAMint,
      TAccountTokenBMint extends string
        ? ReadonlyAccount<TAccountTokenBMint>
        : TAccountTokenBMint,
      TAccountAVault extends string
        ? WritableAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? WritableAccount<TAccountBVault>
        : TAccountBVault,
      TAccountATokenVault extends string
        ? WritableAccount<TAccountATokenVault>
        : TAccountATokenVault,
      TAccountBTokenVault extends string
        ? WritableAccount<TAccountBTokenVault>
        : TAccountBTokenVault,
      TAccountAVaultLpMint extends string
        ? WritableAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? WritableAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      TAccountAVaultLp extends string
        ? WritableAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? WritableAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountVirtualPoolLp extends string
        ? WritableAccount<TAccountVirtualPoolLp>
        : TAccountVirtualPoolLp,
      TAccountProtocolTokenAFee extends string
        ? WritableAccount<TAccountProtocolTokenAFee>
        : TAccountProtocolTokenAFee,
      TAccountProtocolTokenBFee extends string
        ? WritableAccount<TAccountProtocolTokenBFee>
        : TAccountProtocolTokenBFee,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountMintMetadata extends string
        ? WritableAccount<TAccountMintMetadata>
        : TAccountMintMetadata,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountAmmProgram extends string
        ? ReadonlyAccount<TAccountAmmProgram>
        : TAccountAmmProgram,
      TAccountVaultProgram extends string
        ? ReadonlyAccount<TAccountVaultProgram>
        : TAccountVaultProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateMeteoraDammInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MigrateMeteoraDammInstructionDataArgs = {};

export function getMigrateMeteoraDammInstructionDataEncoder(): Encoder<MigrateMeteoraDammInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MIGRATE_METEORA_DAMM_DISCRIMINATOR })
  );
}

export function getMigrateMeteoraDammInstructionDataDecoder(): Decoder<MigrateMeteoraDammInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMigrateMeteoraDammInstructionDataCodec(): Codec<
  MigrateMeteoraDammInstructionDataArgs,
  MigrateMeteoraDammInstructionData
> {
  return combineCodec(
    getMigrateMeteoraDammInstructionDataEncoder(),
    getMigrateMeteoraDammInstructionDataDecoder()
  );
}

export type MigrateMeteoraDammAsyncInput<
  TAccountVirtualPool extends string = string,
  TAccountMigrationMetadata extends string = string,
  TAccountConfig extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountDammConfig extends string = string,
  TAccountLpMint extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountATokenVault extends string = string,
  TAccountBTokenVault extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountVirtualPoolLp extends string = string,
  TAccountProtocolTokenAFee extends string = string,
  TAccountProtocolTokenBFee extends string = string,
  TAccountPayer extends string = string,
  TAccountRent extends string = string,
  TAccountMintMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountVaultProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** virtual pool */
  virtualPool: Address<TAccountVirtualPool>;
  migrationMetadata: Address<TAccountMigrationMetadata>;
  config: Address<TAccountConfig>;
  poolAuthority?: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  /** pool config */
  dammConfig: Address<TAccountDammConfig>;
  lpMint: Address<TAccountLpMint>;
  tokenAMint: Address<TAccountTokenAMint>;
  tokenBMint: Address<TAccountTokenBMint>;
  aVault: Address<TAccountAVault>;
  bVault: Address<TAccountBVault>;
  aTokenVault: Address<TAccountATokenVault>;
  bTokenVault: Address<TAccountBTokenVault>;
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  aVaultLp: Address<TAccountAVaultLp>;
  bVaultLp: Address<TAccountBVaultLp>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  virtualPoolLp: Address<TAccountVirtualPoolLp>;
  protocolTokenAFee: Address<TAccountProtocolTokenAFee>;
  protocolTokenBFee: Address<TAccountProtocolTokenBFee>;
  payer: TransactionSigner<TAccountPayer>;
  rent?: Address<TAccountRent>;
  mintMetadata: Address<TAccountMintMetadata>;
  metadataProgram: Address<TAccountMetadataProgram>;
  ammProgram?: Address<TAccountAmmProgram>;
  vaultProgram: Address<TAccountVaultProgram>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getMigrateMeteoraDammInstructionAsync<
  TAccountVirtualPool extends string,
  TAccountMigrationMetadata extends string,
  TAccountConfig extends string,
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountDammConfig extends string,
  TAccountLpMint extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountATokenVault extends string,
  TAccountBTokenVault extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountVirtualPoolLp extends string,
  TAccountProtocolTokenAFee extends string,
  TAccountProtocolTokenBFee extends string,
  TAccountPayer extends string,
  TAccountRent extends string,
  TAccountMintMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountAmmProgram extends string,
  TAccountVaultProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrateMeteoraDammAsyncInput<
    TAccountVirtualPool,
    TAccountMigrationMetadata,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountDammConfig,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountVirtualPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountAmmProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateMeteoraDammInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountMigrationMetadata,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountDammConfig,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountVirtualPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountAmmProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    virtualPool: { value: input.virtualPool ?? null, isWritable: true },
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    dammConfig: { value: input.dammConfig ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: true },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: true },
    bVault: { value: input.bVault ?? null, isWritable: true },
    aTokenVault: { value: input.aTokenVault ?? null, isWritable: true },
    bTokenVault: { value: input.bTokenVault ?? null, isWritable: true },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: true },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: true },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: true },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    virtualPoolLp: { value: input.virtualPoolLp ?? null, isWritable: true },
    protocolTokenAFee: {
      value: input.protocolTokenAFee ?? null,
      isWritable: true,
    },
    protocolTokenBFee: {
      value: input.protocolTokenBFee ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    mintMetadata: { value: input.mintMetadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    vaultProgram: { value: input.vaultProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolAuthority.value) {
    accounts.poolAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB' as Address<'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.dammConfig),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aTokenVault),
      getAccountMeta(accounts.bTokenVault),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.virtualPoolLp),
      getAccountMeta(accounts.protocolTokenAFee),
      getAccountMeta(accounts.protocolTokenBFee),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.mintMetadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.vaultProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMigrateMeteoraDammInstructionDataEncoder().encode({}),
  } as MigrateMeteoraDammInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountMigrationMetadata,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountDammConfig,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountVirtualPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountAmmProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MigrateMeteoraDammInput<
  TAccountVirtualPool extends string = string,
  TAccountMigrationMetadata extends string = string,
  TAccountConfig extends string = string,
  TAccountPoolAuthority extends string = string,
  TAccountPool extends string = string,
  TAccountDammConfig extends string = string,
  TAccountLpMint extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountATokenVault extends string = string,
  TAccountBTokenVault extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountVirtualPoolLp extends string = string,
  TAccountProtocolTokenAFee extends string = string,
  TAccountProtocolTokenBFee extends string = string,
  TAccountPayer extends string = string,
  TAccountRent extends string = string,
  TAccountMintMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountAmmProgram extends string = string,
  TAccountVaultProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** virtual pool */
  virtualPool: Address<TAccountVirtualPool>;
  migrationMetadata: Address<TAccountMigrationMetadata>;
  config: Address<TAccountConfig>;
  poolAuthority: Address<TAccountPoolAuthority>;
  pool: Address<TAccountPool>;
  /** pool config */
  dammConfig: Address<TAccountDammConfig>;
  lpMint: Address<TAccountLpMint>;
  tokenAMint: Address<TAccountTokenAMint>;
  tokenBMint: Address<TAccountTokenBMint>;
  aVault: Address<TAccountAVault>;
  bVault: Address<TAccountBVault>;
  aTokenVault: Address<TAccountATokenVault>;
  bTokenVault: Address<TAccountBTokenVault>;
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  aVaultLp: Address<TAccountAVaultLp>;
  bVaultLp: Address<TAccountBVaultLp>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  virtualPoolLp: Address<TAccountVirtualPoolLp>;
  protocolTokenAFee: Address<TAccountProtocolTokenAFee>;
  protocolTokenBFee: Address<TAccountProtocolTokenBFee>;
  payer: TransactionSigner<TAccountPayer>;
  rent?: Address<TAccountRent>;
  mintMetadata: Address<TAccountMintMetadata>;
  metadataProgram: Address<TAccountMetadataProgram>;
  ammProgram?: Address<TAccountAmmProgram>;
  vaultProgram: Address<TAccountVaultProgram>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getMigrateMeteoraDammInstruction<
  TAccountVirtualPool extends string,
  TAccountMigrationMetadata extends string,
  TAccountConfig extends string,
  TAccountPoolAuthority extends string,
  TAccountPool extends string,
  TAccountDammConfig extends string,
  TAccountLpMint extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountATokenVault extends string,
  TAccountBTokenVault extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountVirtualPoolLp extends string,
  TAccountProtocolTokenAFee extends string,
  TAccountProtocolTokenBFee extends string,
  TAccountPayer extends string,
  TAccountRent extends string,
  TAccountMintMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountAmmProgram extends string,
  TAccountVaultProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
>(
  input: MigrateMeteoraDammInput<
    TAccountVirtualPool,
    TAccountMigrationMetadata,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountDammConfig,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountVirtualPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountAmmProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateMeteoraDammInstruction<
  TProgramAddress,
  TAccountVirtualPool,
  TAccountMigrationMetadata,
  TAccountConfig,
  TAccountPoolAuthority,
  TAccountPool,
  TAccountDammConfig,
  TAccountLpMint,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountAVault,
  TAccountBVault,
  TAccountATokenVault,
  TAccountBTokenVault,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountVirtualPoolLp,
  TAccountProtocolTokenAFee,
  TAccountProtocolTokenBFee,
  TAccountPayer,
  TAccountRent,
  TAccountMintMetadata,
  TAccountMetadataProgram,
  TAccountAmmProgram,
  TAccountVaultProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VIRTUAL_CURVE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    virtualPool: { value: input.virtualPool ?? null, isWritable: true },
    migrationMetadata: {
      value: input.migrationMetadata ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: false },
    poolAuthority: { value: input.poolAuthority ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    dammConfig: { value: input.dammConfig ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: true },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: true },
    bVault: { value: input.bVault ?? null, isWritable: true },
    aTokenVault: { value: input.aTokenVault ?? null, isWritable: true },
    bTokenVault: { value: input.bTokenVault ?? null, isWritable: true },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: true },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: true },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: true },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    virtualPoolLp: { value: input.virtualPoolLp ?? null, isWritable: true },
    protocolTokenAFee: {
      value: input.protocolTokenAFee ?? null,
      isWritable: true,
    },
    protocolTokenBFee: {
      value: input.protocolTokenBFee ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    mintMetadata: { value: input.mintMetadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    ammProgram: { value: input.ammProgram ?? null, isWritable: false },
    vaultProgram: { value: input.vaultProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.ammProgram.value) {
    accounts.ammProgram.value =
      'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB' as Address<'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.virtualPool),
      getAccountMeta(accounts.migrationMetadata),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.poolAuthority),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.dammConfig),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aTokenVault),
      getAccountMeta(accounts.bTokenVault),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.virtualPoolLp),
      getAccountMeta(accounts.protocolTokenAFee),
      getAccountMeta(accounts.protocolTokenBFee),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.mintMetadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.ammProgram),
      getAccountMeta(accounts.vaultProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMigrateMeteoraDammInstructionDataEncoder().encode({}),
  } as MigrateMeteoraDammInstruction<
    TProgramAddress,
    TAccountVirtualPool,
    TAccountMigrationMetadata,
    TAccountConfig,
    TAccountPoolAuthority,
    TAccountPool,
    TAccountDammConfig,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountVirtualPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountAmmProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMigrateMeteoraDammInstruction<
  TProgram extends string = typeof VIRTUAL_CURVE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** virtual pool */
    virtualPool: TAccountMetas[0];
    migrationMetadata: TAccountMetas[1];
    config: TAccountMetas[2];
    poolAuthority: TAccountMetas[3];
    pool: TAccountMetas[4];
    /** pool config */
    dammConfig: TAccountMetas[5];
    lpMint: TAccountMetas[6];
    tokenAMint: TAccountMetas[7];
    tokenBMint: TAccountMetas[8];
    aVault: TAccountMetas[9];
    bVault: TAccountMetas[10];
    aTokenVault: TAccountMetas[11];
    bTokenVault: TAccountMetas[12];
    aVaultLpMint: TAccountMetas[13];
    bVaultLpMint: TAccountMetas[14];
    aVaultLp: TAccountMetas[15];
    bVaultLp: TAccountMetas[16];
    baseVault: TAccountMetas[17];
    quoteVault: TAccountMetas[18];
    virtualPoolLp: TAccountMetas[19];
    protocolTokenAFee: TAccountMetas[20];
    protocolTokenBFee: TAccountMetas[21];
    payer: TAccountMetas[22];
    rent: TAccountMetas[23];
    mintMetadata: TAccountMetas[24];
    metadataProgram: TAccountMetas[25];
    ammProgram: TAccountMetas[26];
    vaultProgram: TAccountMetas[27];
    /** token_program */
    tokenProgram: TAccountMetas[28];
    associatedTokenProgram: TAccountMetas[29];
    /** System program. */
    systemProgram: TAccountMetas[30];
  };
  data: MigrateMeteoraDammInstructionData;
};

export function parseMigrateMeteoraDammInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMigrateMeteoraDammInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 31) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      virtualPool: getNextAccount(),
      migrationMetadata: getNextAccount(),
      config: getNextAccount(),
      poolAuthority: getNextAccount(),
      pool: getNextAccount(),
      dammConfig: getNextAccount(),
      lpMint: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aTokenVault: getNextAccount(),
      bTokenVault: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      virtualPoolLp: getNextAccount(),
      protocolTokenAFee: getNextAccount(),
      protocolTokenBFee: getNextAccount(),
      payer: getNextAccount(),
      rent: getNextAccount(),
      mintMetadata: getNextAccount(),
      metadataProgram: getNextAccount(),
      ammProgram: getNextAccount(),
      vaultProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMigrateMeteoraDammInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
